package controllers

import (
	"database/sql"
	"fmt"
	"log"
	"net/http"
	"ranking-school/models"
	"ranking-school/utils"
	"time"
)

type SchoolController struct{}


func (sc SchoolController) CreateSchool(db *sql.DB) http.HandlerFunc {
    return func(w http.ResponseWriter, r *http.Request) {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–æ–ª—É—á–∞–µ–º userID
        userID, err := utils.VerifyToken(r)
        if err != nil {
            utils.RespondWithError(w, http.StatusUnauthorized, models.Error{Message: err.Error()})
            return
        }

        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        var userRole string
        err = db.QueryRow("SELECT role FROM users WHERE id = ?", userID).Scan(&userRole)
        if err != nil {
            log.Println("Error fetching user role:", err)
            utils.RespondWithError(w, http.StatusInternalServerError, models.Error{Message: "Error fetching user role"})
            return
        }

        if userRole != "superadmin" {
            utils.RespondWithError(w, http.StatusForbidden, models.Error{Message: "You do not have permission to create a school"})
            return
        }

        // 3. –°—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ form-data
        var school models.School
        school.SchoolName = r.FormValue("school_name")  // –ù–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã
        school.City = r.FormValue("city")               // –ì–æ—Ä–æ–¥
        school.SchoolAdminLogin = r.FormValue("school_admin_login") // –õ–æ–≥–∏–Ω —à–∫–æ–ª—å–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ª–æ–≥–∏–Ω —à–∫–æ–ª—å–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–µ—Ä–µ–¥–∞–Ω
        if school.SchoolAdminLogin == "" {
            utils.RespondWithError(w, http.StatusBadRequest, models.Error{Message: "SchoolAdminLogin is required"})
            return
        }

        // 4. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ —à–∫–æ–ª—ã (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ)
        file, _, err := r.FormFile("photo")
        if err == nil { // –ï—Å–ª–∏ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
            defer file.Close()
            uniqueFileName := fmt.Sprintf("school-%d-%d.jpg", userID, time.Now().Unix())
            photoURL, err := utils.UploadFileToS3(file, uniqueFileName, false)
            if err != nil {
                log.Println("Error uploading file:", err)
                utils.RespondWithError(w, http.StatusInternalServerError, models.Error{Message: "Failed to upload file"})
                return
            }
            school.PhotoURL = photoURL  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–ª–µ PhotoURL
        }

        // 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —à–∫–æ–ª–µ –≤ —Ç–∞–±–ª–∏—Ü—É
        query := `
            INSERT INTO Schools (name, city, school_admin_login, photo_url, created_at, updated_at)
            VALUES (?, ?, ?, ?, NOW(), NOW())
        `
        result, err := db.Exec(query,
            school.SchoolName,
            school.City,
            school.SchoolAdminLogin, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—á—Ç—É (–ª–æ–≥–∏–Ω) —à–∫–æ–ª—å–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            school.PhotoURL,         // –°–æ—Ö—Ä–∞–Ω—è–µ–º URL —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        )
        if err != nil {
            log.Println("SQL Insert Error:", err)
            utils.RespondWithError(w, http.StatusInternalServerError, models.Error{Message: "Failed to create school"})
            return
        }

        // –ü–æ–ª—É—á–∞–µ–º ID –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
        id, _ := result.LastInsertId()
        school.SchoolID = int(id)

        // 6. –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ school_id –≤ —Ç–∞–±–ª–∏—Ü–µ users –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        updateQuery := `
            UPDATE users
            SET school_id = ?
            WHERE id = ?
        `
        _, err = db.Exec(updateQuery, school.SchoolID, userID)
        if err != nil {
            log.Println("SQL Update Error:", err)
            utils.RespondWithError(w, http.StatusInternalServerError, models.Error{Message: "Failed to update user with school_id"})
            return
        }

        // 7. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON
        utils.ResponseJSON(w, school)
    }
}


// func (sc SchoolController) GetSchool(db *sql.DB) http.HandlerFunc {
//     return func(w http.ResponseWriter, r *http.Request) {
//         // ‚úÖ –ü–æ–ª—É—á–∞–µ–º school_id –∏–∑ path-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞
//         vars := mux.Vars(r)
//         schoolID := vars["id"]
//         if schoolID == "" {
//             utils.RespondWithError(w, http.StatusBadRequest, models.Error{Message: "School ID is required"})
//             return
//         }

//         // üì• –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
//         var school models.School
//         query := `
//             SELECT school_id, name, address, city, title, description, photo_url, email, phone, director_email,
//                    DATE_FORMAT(created_at, '%Y-%m-%d %H:%i:%s'),
//                    DATE_FORMAT(updated_at, '%Y-%m-%d %H:%i:%s')
//             FROM Schools
//             WHERE school_id = ?
//         `
//         err := db.QueryRow(query, schoolID).Scan(
//             &school.SchoolID,
//             &school.Name,
//             &school.Address,
//             &school.City,
//             &school.Title,
//             &school.Description,
//             &school.PhotoURL,
//             &school.Email,
//             &school.Phone,
//             &school.DirectorEmail,
//             &school.CreatedAt,
//             &school.UpdatedAt,
//         )

//         if err != nil {
//             if err == sql.ErrNoRows {
//                 utils.RespondWithError(w, http.StatusNotFound, models.Error{Message: "School not found"})
//             } else {
//                 log.Println("SQL Select Error:", err)
//                 utils.RespondWithError(w, http.StatusInternalServerError, models.Error{Message: "Failed to retrieve school"})
//             }
//             return
//         }

//         // ‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
//         utils.ResponseJSON(w, school)
//     }
// }
// func (sc SchoolController) UpdateSchool(db *sql.DB) http.HandlerFunc {
//     return func(w http.ResponseWriter, r *http.Request) {
//         // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
//         userID, err := utils.VerifyToken(r)
//         if err != nil {
//             utils.RespondWithError(w, http.StatusUnauthorized, models.Error{Message: err.Error()})
//             return
//         }

//         // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏
//         var userRole string
//         err = db.QueryRow("SELECT role FROM users WHERE id = ?", userID).Scan(&userRole)
//         if err != nil {
//             utils.RespondWithError(w, http.StatusInternalServerError, models.Error{Message: "Error fetching user role"})
//             return
//         }

//         if userRole != "superadmin" {
//             utils.RespondWithError(w, http.StatusForbidden, models.Error{Message: "Only superadmin can update schools"})
//             return
//         }

//         // ‚úÖ 3. –ü–æ–ª—É—á–∞–µ–º school_id –∏–∑ path-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞
//         vars := mux.Vars(r)
//         schoolID := vars["id"]
//         if schoolID == "" {
//             utils.RespondWithError(w, http.StatusBadRequest, models.Error{Message: "School ID is required"})
//             return
//         }

//         // 4. –î–µ–∫–æ–¥–∏—Ä—É–µ–º JSON –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
//         var school models.School
//         err = json.NewDecoder(r.Body).Decode(&school)
//         if err != nil {
//             utils.RespondWithError(w, http.StatusBadRequest, models.Error{Message: "Invalid JSON data"})
//             return
//         }

//         // 5. –û–±–Ω–æ–≤–ª—è–µ–º —à–∫–æ–ª—É
//         query := `
//             UPDATE Schools
//             SET 
//                 name = ?, city = ?, title = ?, description = ?, 
//                 address = ?, email = ?, phone = ?, director_email = ?, 
//                 photo_url = ?, updated_at = NOW()
//             WHERE school_id = ?
//         `
//         _, err = db.Exec(query,
//             school.Name,
//             school.City,
//             school.Title,
//             school.Description,
//             school.Address,
//             school.Email,
//             school.Phone,
//             school.DirectorEmail,
//             school.PhotoURL,
//             schoolID,
//         )
//         if err != nil {
//             utils.RespondWithError(w, http.StatusInternalServerError, models.Error{Message: "Failed to update school"})
//             return
//         }

//         utils.ResponseJSON(w, map[string]interface{}{
//             "message":    "School updated successfully",
//             "school_id":  schoolID,
//             "updated_by": userID,
//         })
//     }
// }
// func (sc SchoolController) DeleteSchool(db *sql.DB) http.HandlerFunc {
//     return func(w http.ResponseWriter, r *http.Request) {
//         // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ —Ä–æ–ª–∏
//         userID, err := utils.VerifyToken(r)
//         if err != nil {
//             utils.RespondWithError(w, http.StatusUnauthorized, models.Error{Message: "Invalid token"})
//             return
//         }

//         var userRole string
//         err = db.QueryRow("SELECT role FROM users WHERE id = ?", userID).Scan(&userRole)
//         if err != nil {
//             log.Println("Error fetching user role:", err)
//             utils.RespondWithError(w, http.StatusInternalServerError, models.Error{Message: "Error fetching user role"})
//             return
//         }

//         if userRole != "superadmin" {
//             utils.RespondWithError(w, http.StatusForbidden, models.Error{Message: "Only superadmin can delete a school"})
//             return
//         }

//         // ‚úÖ 2. –ü–æ–ª—É—á–∞–µ–º school_id –∏–∑ path-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞
//         vars := mux.Vars(r)
//         schoolID := vars["id"]
//         if schoolID == "" {
//             utils.RespondWithError(w, http.StatusBadRequest, models.Error{Message: "School ID is required"})
//             return
//         }

//         // 3. –£–¥–∞–ª—è–µ–º —à–∫–æ–ª—É
//         result, err := db.Exec("DELETE FROM Schools WHERE school_id = ?", schoolID)
//         if err != nil {
//             log.Println("SQL Delete Error:", err)
//             utils.RespondWithError(w, http.StatusInternalServerError, models.Error{Message: "Failed to delete school"})
//             return
//         }

//         // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö —Å—Ç—Ä–æ–∫
//         rowsAffected, _ := result.RowsAffected()
//         if rowsAffected == 0 {
//             utils.RespondWithError(w, http.StatusNotFound, models.Error{Message: "School not found"})
//             return
//         }

//         // 5. –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
//         utils.ResponseJSON(w, map[string]interface{}{
//             "message":    "School deleted successfully",
//             "school_id":  schoolID,
//             "deleted_by": userID,
//         })
//     }
// }
// func (sc SchoolController) UpdateMySchool(db *sql.DB) http.HandlerFunc {
//     return func(w http.ResponseWriter, r *http.Request) {
//         // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
//         userID, err := utils.VerifyToken(r)
//         if err != nil {
//             utils.RespondWithError(w, http.StatusUnauthorized, models.Error{Message: "Invalid token"})
//             return
//         }

//         // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –∏ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
//         var role, userEmail string
//         err = db.QueryRow("SELECT role, email FROM users WHERE id = ?", userID).Scan(&role, &userEmail)
//         if err != nil {
//             utils.RespondWithError(w, http.StatusInternalServerError, models.Error{Message: "Failed to get user info"})
//             return
//         }

//         // 3. –†–∞–∑—Ä–µ—à–∏—Ç—å —Ç–æ–ª—å–∫–æ schooladmin
//         if role != "schooladmin" {
//             utils.RespondWithError(w, http.StatusForbidden, models.Error{Message: "Only schooladmin can update school"})
//             return
//         }

//         // 4. –ù–∞–π—Ç–∏ school_id, –≥–¥–µ director_email —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
//         var schoolID int
//         err = db.QueryRow("SELECT school_id FROM Schools WHERE director_email = ?", userEmail).Scan(&schoolID)
//         if err != nil || schoolID == 0 {
//             utils.RespondWithError(w, http.StatusNotFound, models.Error{Message: "No school assigned to your email"})
//             return
//         }

//         // 5. –ü—Ä–æ—á–∏—Ç–∞—Ç—å JSON –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
//         var input struct {
//             Address     string `json:"address"`
//             Title       string `json:"title"`
//             Description string `json:"description"`
//             Email       string `json:"email"`
//             Phone       string `json:"phone"`
//             PhotoURL    string `json:"photo_url"`
//         }

//         err = json.NewDecoder(r.Body).Decode(&input)
//         if err != nil {
//             utils.RespondWithError(w, http.StatusBadRequest, models.Error{Message: "Invalid JSON format"})
//             return
//         }

//         // 6. –û–±–Ω–æ–≤–∏—Ç—å —à–∫–æ–ª—É
//         query := `
//             UPDATE Schools
//             SET address = ?, title = ?, description = ?, email = ?, phone = ?, photo_url = ?, updated_at = NOW()
//             WHERE school_id = ?
//         `
//         _, err = db.Exec(query,
//             input.Address,
//             input.Title,
//             input.Description,
//             input.Email,
//             input.Phone,
//             input.PhotoURL,
//             schoolID,
//         )
//         if err != nil {
//             utils.RespondWithError(w, http.StatusInternalServerError, models.Error{Message: "Failed to update school"})
//             return
//         }

//         // 7. –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
//         utils.ResponseJSON(w, map[string]interface{}{
//             "message":    "School updated successfully",
//             "school_id":  schoolID,
//             "updated_by": userEmail,
//         })
//     }
// }











// func (sc SchoolController) GetSchools(db *sql.DB) http.HandlerFunc {
//     return func(w http.ResponseWriter, r *http.Request) {
//         rows, err := db.Query("SELECT school_id, name, address, title, description, photo_url, email, phone FROM Schools")
//         if err != nil {
//             log.Println("SQL Select Error:", err)
//             utils.RespondWithError(w, http.StatusInternalServerError, models.Error{Message: "Failed to get schools"})
//             return
//         }
//         defer rows.Close()

//         var schools []models.School
//         for rows.Next() {
//             var school models.School
//             if err := rows.Scan(&school.SchoolID, &school.Name, &school.Address, &school.Title, &school.Description, &school.PhotoURL, &school.Email, &school.Phone); err != nil {
//                 log.Println("SQL Scan Error:", err)
//                 utils.RespondWithError(w, http.StatusInternalServerError, models.Error{Message: "Failed to parse schools"})
//                 return
//             }

//             // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º sql.NullString –≤ —Å—Ç—Ä–æ–∫—É (–µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ NULL, —Ç–æ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞)
//             if !school.Email.Valid {
//                 school.Email.String = "" // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ NULL, —Ç–æ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
//             }
//             if !school.Phone.Valid {
//                 school.Phone.String = "" // –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ NULL, —Ç–æ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
//             }

//             schools = append(schools, school)
//         }

//         // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º sql.NullString –≤ –æ–±—ã—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ JSON
//         var response []map[string]interface{}
//         for _, school := range schools {
//             schoolData := map[string]interface{}{
//                 "school_id":   school.SchoolID,
//                 "name":        school.Name,
//                 "address":     school.Address,
//                 "title":       school.Title,
//                 "description": school.Description,
//                 "photo_url":   school.PhotoURL,
//                 "email":       school.Email.String,  // –ü—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
//                 "phone":       school.Phone.String,  // –ü—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
//             }
//             response = append(response, schoolData)
//         }

//         utils.ResponseJSON(w, response)
//     }
// }
// func (sc SchoolController) GetSchoolForDirector(db *sql.DB) http.HandlerFunc {
//     return func(w http.ResponseWriter, r *http.Request) {
//         // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –∏ –ø–æ–ª—É—á–∞–µ–º userID
//         userID, err := utils.VerifyToken(r)
//         if err != nil {
//             utils.RespondWithError(w, http.StatusUnauthorized, models.Error{Message: err.Error()})
//             return
//         }

//         // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
//         var userRole string
//         err = db.QueryRow("SELECT role FROM users WHERE id = ?", userID).Scan(&userRole)
//         if err != nil {
//             utils.RespondWithError(w, http.StatusInternalServerError, models.Error{Message: "Error fetching user role"})
//             return
//         }

//         // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç —Ä–æ–ª—å "director"
//         if userRole != "director" {
//             utils.RespondWithError(w, http.StatusForbidden, models.Error{Message: "You do not have permission to view this school"})
//             return
//         }

//         // –õ–æ–≥–∏—Ä—É–µ–º userID
//         log.Printf("Fetching school for user ID: %d", userID)

//         // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∫–æ–ª–µ –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
//         var school models.School
//         err = db.QueryRow(`
//             SELECT s.school_id, s.name, s.address, s.title, s.description, s.photo_url, s.email, s.phone
//             FROM schools s
//             INNER JOIN users u ON u.school_id = s.school_id
//             WHERE u.id = ?`, userID).Scan(
//             &school.SchoolID, &school.Name, &school.Address, &school.Title, &school.Description, &school.PhotoURL, &school.Email, &school.Phone,
//         )
//         if err != nil {
//             if err == sql.ErrNoRows {
//                 utils.RespondWithError(w, http.StatusNotFound, models.Error{Message: "No school found for this director"})
//             } else {
//                 utils.RespondWithError(w, http.StatusInternalServerError, models.Error{Message: "Error fetching school"})
//             }
//             return
//         }

//         // –£–±–∏—Ä–∞–µ–º –ø–æ–ª–µ Contacts –∏–∑ –æ—Ç–≤–µ—Ç–∞
//         // school.Contacts = "" // –£–±–∏—Ä–∞–µ–º –ø–æ–ª–µ contacts, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

//         // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —à–∫–æ–ª–µ –±–µ–∑ –ø–æ–ª—è Contacts
//         utils.ResponseJSON(w, school)
//     }
// }
// func (sc SchoolController) CalculateScore(db *sql.DB) http.HandlerFunc {
// 	return func(w http.ResponseWriter, r *http.Request) {
// 		var score models.UNTScore
// 		if err := json.NewDecoder(r.Body).Decode(&score); err != nil {
// 			utils.RespondWithError(w, http.StatusBadRequest, models.Error{Message: "Invalid request"})
// 			return
// 		}

// 		totalScore := score.FirstSubjectScore + score.SecondSubjectScore + score.HistoryKazakhstan + score.MathematicalLiteracy + score.ReadingLiteracy
// 		score.TotalScore = totalScore

// 		query := `INSERT INTO UNT_Score (year, unt_type_id, student_id, first_subject_score, second_subject_score, history_of_kazakhstan, mathematical_literacy, reading_literacy, score) 
// 				VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?)`
// 		_, err := db.Exec(query, score.Year, score.UNTTypeID, score.StudentID, score.FirstSubjectScore, score.SecondSubjectScore, score.HistoryKazakhstan, score.MathematicalLiteracy, score.ReadingLiteracy, score.TotalScore)
// 		if err != nil {
// 			log.Println("SQL Error:", err)
// 			utils.RespondWithError(w, http.StatusInternalServerError, models.Error{Message: "Failed to calculate and save score"})
// 			return
// 		}

// 		utils.ResponseJSON(w, "Score calculated and saved successfully")
// 	}
// }
// func (sc SchoolController) DeleteSchool(db *sql.DB) http.HandlerFunc {
//     return func(w http.ResponseWriter, r *http.Request) {
//         // 1. –ü–æ–ª—É—á–∞–µ–º school_id –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
//         schoolID := r.URL.Query().Get("school_id")
//         if schoolID == "" {
//             utils.RespondWithError(w, http.StatusBadRequest, models.Error{Message: "School ID is required"})
//             return
//         }

//         // 2. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º school_id –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
//         id, err := strconv.Atoi(schoolID)
//         if err != nil {
//             utils.RespondWithError(w, http.StatusBadRequest, models.Error{Message: "Invalid school ID format"})
//             return
//         }

//         // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ —ç—Ç–æ–π —à–∫–æ–ª–µ
//         var userCount int
//         err = db.QueryRow("SELECT COUNT(*) FROM users WHERE school_id = ?", id).Scan(&userCount)
//         if err != nil {
//             log.Println("Error checking users:", err)
//             utils.RespondWithError(w, http.StatusInternalServerError, models.Error{Message: "Failed to check users"})
//             return
//         }

//         // 4. –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
//         if userCount > 0 {
//             utils.RespondWithError(w, http.StatusForbidden, models.Error{Message: "This school is assigned to a user and cannot be deleted"})
//             return
//         }

//         // 5. –¢–µ–ø–µ—Ä—å —É–¥–∞–ª—è–µ–º —à–∫–æ–ª—É
//         query := "DELETE FROM Schools WHERE school_id = ?"
//         result, err := db.Exec(query, id)
//         if err != nil {
//             log.Println("Error deleting school:", err)
//             utils.RespondWithError(w, http.StatusInternalServerError, models.Error{Message: "Failed to delete school"})
//             return
//         }

//         // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –±—ã–ª–æ –∑–∞—Ç—Ä–æ–Ω—É—Ç–æ
//         rowsAffected, err := result.RowsAffected()
//         if err != nil || rowsAffected == 0 {
//             utils.RespondWithError(w, http.StatusNotFound, models.Error{Message: "School not found"})
//             return
//         }

//         // 7. –£—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
//         utils.ResponseJSON(w, map[string]string{"message": "School deleted successfully"})
//     }
// }

// func (sc SchoolController) CalculateAverageRating(db *sql.DB) http.HandlerFunc {
//     return func(w http.ResponseWriter, r *http.Request) {
//         // 1. Get the school ID from query parameters
//         schoolID := r.URL.Query().Get("school_id")
//         if schoolID == "" {
//             utils.RespondWithError(w, http.StatusBadRequest, models.Error{Message: "School ID is required"})
//             return
//         }

//         // 2. Calculate the average rating from various sources

//         // Get the total score from UNT scores for this school
//         var totalUNTScore int
//         var totalStudents int
//         rows, err := db.Query(`
//             SELECT COUNT(*) AS student_count, SUM(total_score) AS total_score
//             FROM UNT_Score us
//             JOIN Student s ON us.student_id = s.student_id
//             WHERE s.school_id = ?
//         `, schoolID)

//         if err != nil {
//             log.Println("SQL Error:", err)
//             utils.RespondWithError(w, http.StatusInternalServerError, models.Error{Message: "Failed to calculate UNT score"})
//             return
//         }
//         defer rows.Close()

//         if rows.Next() {
//             err = rows.Scan(&totalStudents, &totalUNTScore)
//             if err != nil {
//                 log.Println("Error scanning UNT data:", err)
//                 utils.RespondWithError(w, http.StatusInternalServerError, models.Error{Message: "Error scanning UNT data"})
//                 return
//             }
//         }

//         // Calculate average UNT score
//         var averageUNTScore float64
//         if totalStudents > 0 {
//             averageUNTScore = float64(totalUNTScore) / float64(totalStudents)
//         }

//         // 3. Get reviews score (e.g., average of reviews from a `reviews` table)
//         var averageReviewScore float64
//         err = db.QueryRow(`
//             SELECT AVG(review_score) 
//             FROM reviews 
//             WHERE school_id = ?
//         `, schoolID).Scan(&averageReviewScore)
//         if err != nil {
//             log.Println("SQL Error fetching reviews:", err)
//             utils.RespondWithError(w, http.StatusInternalServerError, models.Error{Message: "Failed to get reviews score"})
//             return
//         }

//         // 4. Get olympiad participation score
//         var olympiadScore int
//         err = db.QueryRow(`
//             SELECT SUM(olympiad_points) 
//             FROM olympiad_results
//             WHERE school_id = ?
//         `, schoolID).Scan(&olympiadScore)
//         if err != nil {
//             log.Println("SQL Error fetching olympiad results:", err)
//             utils.RespondWithError(w, http.StatusInternalServerError, models.Error{Message: "Failed to get olympiad results"})
//             return
//         }

//         // 5. Calculate the final average rating based on all criteria
//         finalAverageRating := (averageUNTScore * 0.4) + (averageReviewScore * 0.3) + (float64(olympiadScore) * 0.3)

//         // Return the result as JSON
//         utils.ResponseJSON(w, map[string]interface{}{
//             "school_id":            schoolID,
//             "average_rating":       finalAverageRating,
//             "average_unt_score":    averageUNTScore,
//             "average_review_score": averageReviewScore,
//             "olympiad_score":       olympiadScore,
//         })
//     }
// }












